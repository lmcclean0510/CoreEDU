rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ==========================================
    // HELPER FUNCTIONS - ENHANCED SECURITY
    // ==========================================
    
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function isTeacher() {
      return isSignedIn() && getUserData().role == 'teacher';
    }

    function isStudent() {
      return isSignedIn() && getUserData().role == 'student';
    }

    function isAdmin() {
      return request.auth != null && request.auth.token.admin == true;
    }

    function isClassTeacher(classId) {
      return request.auth.uid in get(/databases/$(database)/documents/classes/$(classId)).data.teacherIds;
    }

    function isInSameSchool(otherUserId) {
      return getUserData().schoolId == get(/databases/$(database)/documents/users/$(otherUserId)).data.schoolId;
    }

    function isValidEmail(email) {
      return email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }

    function isValidRole(role) {
      return role in ['student', 'teacher'];
    }

    // ==========================================
    // USER MANAGEMENT - ENHANCED SECURITY
    // ==========================================
    
    match /users/{userId} {
      // Users can read their own document
      allow read: if isSignedIn() && isOwner(userId);
      
      // Teachers can ONLY read users in their school (not all users globally)
      allow read: if isSignedIn() && isTeacher() && 
        getUserData().schoolId == resource.data.schoolId;
      
      // Users can update their own document with restrictions
      allow update: if isSignedIn() && isOwner(userId) && 
        // Prevent role escalation
        request.resource.data.role == resource.data.role &&
        // Prevent school switching
        request.resource.data.schoolId == resource.data.schoolId &&
        // Validate email format if changed
        (!('email' in request.resource.data.diff(resource.data).affectedKeys()) || 
         isValidEmail(request.resource.data.email));
      
      // Users can create their own document with validation
      allow create: if isSignedIn() && isOwner(userId) &&
        isValidEmail(request.resource.data.email) &&
        isValidRole(request.resource.data.role) &&
        request.resource.data.uid == request.auth.uid;
      
      // Admin access
      allow read, write: if isAdmin();
    }

    // ==========================================
    // SCHOOL & CLASS MANAGEMENT - ENHANCED
    // ==========================================
    
    match /schools/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /classes/{classId} {
      // Teachers can create classes only for their school
      allow create: if isSignedIn() && isTeacher() &&
        request.resource.data.teacherIds[0] == request.auth.uid;
      
      // Teachers who are part of the class can manage it
      allow read, update, delete: if isSignedIn() && 
        request.auth.uid in resource.data.teacherIds;
      
      // Students can read classes they belong to
      allow read: if isSignedIn() && isStudent() &&
        request.auth.uid in resource.data.studentUids;
      
      // Students can list classes for join code searches (with rate limiting via security)
      allow list: if isSignedIn() && isStudent() &&
        // Limit to reasonable query size
        request.query.limit <= 10;
      
      // Teachers can list their classes
      allow list: if isSignedIn() && isTeacher();
      
      allow write: if isAdmin();
    }

    // ==========================================
    // CLASS JOIN REQUESTS - ENHANCED SECURITY
    // ==========================================

    match /classJoinRequests/{requestId} {
      // Students can create join requests with validation
      allow create: if isSignedIn() && isStudent() && 
        request.resource.data.studentId == request.auth.uid &&
        // Prevent duplicate requests (basic check)
        request.resource.data.status == 'pending';
      
      // Students can read their own join requests
      allow read: if isSignedIn() && isStudent() && 
        resource.data.studentId == request.auth.uid;
      
      // Teachers can read requests for their classes only
      allow read: if isSignedIn() && isTeacher() && 
        isClassTeacher(resource.data.classId);
      
      // Teachers can update/delete requests for their classes
      allow update, delete: if isSignedIn() && isTeacher() && 
        isClassTeacher(resource.data.classId) &&
        // Only allow status changes to approved/denied
        request.resource.data.status in ['approved', 'denied'];
      
      // Teachers can list requests for their classes
      allow list: if isSignedIn() && isTeacher();
      
      // Students can list their own requests only
      allow list: if isSignedIn() && isStudent() &&
        request.query.where[0][0] == 'studentId' &&
        request.query.where[0][2] == request.auth.uid;
      
      allow write: if isAdmin();
    }

    // ==========================================
    // HOMEWORK MANAGEMENT - ENHANCED SECURITY
    // ==========================================
    
    match /homework/{homeworkId} {
      // Teachers can create homework only for their classes
      allow create: if isSignedIn() && isTeacher() &&
        isClassTeacher(request.resource.data.classId);
      
      // Teachers can manage homework for their classes
      allow read, update, delete: if isSignedIn() && 
        isClassTeacher(resource.data.classId);
      
      // Students can read homework for their classes only
      allow read: if isSignedIn() && isStudent() &&
        request.auth.uid in get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.studentUids;
      
      // Limited listing for teachers (their classes only)
      allow list: if isSignedIn() && isTeacher();
      
      // Students can list homework with class restriction
      allow list: if isSignedIn() && isStudent();
      
      allow write: if isAdmin();
    }
    
    match /studentHomeworks/{studentHomeworkId} {
      // Students can create their own homework entries
      allow create: if isSignedIn() && isStudent() &&
        request.resource.data.studentId == request.auth.uid;
      
      // Teachers can create student homework for their classes
      allow create: if isSignedIn() && isTeacher() &&
        isClassTeacher(request.resource.data.classId);
      
      // Students can read their own homework (individual document)
      allow read: if isSignedIn() && isStudent() &&
        resource.data.studentId == request.auth.uid;
      
      // Students can update their own homework with restrictions
      allow update: if isSignedIn() && isStudent() &&
        resource.data.studentId == request.auth.uid &&
        // Prevent tampering with core fields
        request.resource.data.studentId == resource.data.studentId &&
        request.resource.data.homeworkId == resource.data.homeworkId &&
        request.resource.data.classId == resource.data.classId;
      
      // Teachers can read student homework for their classes
      allow read: if isSignedIn() && isTeacher() &&
        isClassTeacher(resource.data.classId);
      
      // Teachers can update/delete student homework for their classes
      allow update, delete: if isSignedIn() && isTeacher() &&
        isClassTeacher(resource.data.classId);
      
      // FIXED: List operations for students - checking the query parameters, not resource
      allow list: if isSignedIn() && isStudent() &&
        request.auth.uid in request.query.where[0][2];
      
      // Teachers can list all homework for their classes
      allow list: if isSignedIn() && isTeacher();
      
      allow write: if isAdmin();
    }

    // ==========================================
    // LEARNING CONTENT - ENHANCED SECURITY
    // ==========================================
    
    match /puzzles/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /sandbox_items/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /puzzleSections/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /fillInTheBlanksChallenges/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /fillInTheBlanksSections/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    // ==========================================
    // FLASHCARD SYSTEM - ENHANCED SECURITY
    // ==========================================
    
    match /flashcards/{document=**} {
      allow read: if isSignedIn();
      allow write: if isAdmin();
    }

    match /userFlashcardRatings/{ratingId} {
      // Users can read their own ratings
      allow read: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // Users can create/update their own ratings with validation
      allow create, update: if isSignedIn() && 
        request.resource.data.userId == request.auth.uid &&
        // Validate confidence values
        (!('confidence' in request.resource.data) || 
         request.resource.data.confidence in [1, 2, 3]) &&
        // Validate numeric fields
        (!('correct' in request.resource.data) || 
         request.resource.data.correct is int) &&
        (!('incorrect' in request.resource.data) || 
         request.resource.data.incorrect is int);
      
      // Users can delete their own ratings
      allow delete: if isSignedIn() && 
        resource.data.userId == request.auth.uid;
      
      // Users can list their own ratings
      allow list: if isSignedIn() && isStudent() &&
        request.auth.uid in request.query.where[0][2];
      
      allow write: if isAdmin();
    }

    // ==========================================
    // ADDITIONAL SECURITY RULES
    // ==========================================

    // Block all other document access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}